import { GoogleGenAI } from "@google/genai";
import { AnalysisReport } from '../types';

// Ensure the API key is available in the environment variables.
// This is a critical check to prevent the app from running without authentication.
if (!process.env.API_KEY) {
    throw new Error("API_KEY environment variable not set.");
}

// Initialize the Google GenAI client with the API key.
const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

/**
 * Constructs a detailed prompt for the Gemini API based on the analysis report.
 * This function performs prompt engineering to guide the AI in generating a structured
 * and insightful response.
 * @param report The analysis report generated by dataProcessor.ts.
 * @param targetVariable The column the user has selected as the target for ML.
 * @returns A string containing the fully constructed prompt.
 */
const buildPrompt = (report: AnalysisReport, targetVariable: string): string => {
    const targetColumn = report.columnAnalyses.find(c => c.name === targetVariable);
    let modelSuggestionInfo = "No target variable selected.";
    if (targetColumn) {
        const isClassification = targetColumn.type === 'Categorical';
        modelSuggestionInfo = `The user has selected '${targetVariable}' (${targetColumn.type}) as the target variable. The suggested model type is ${isClassification ? 'Classification' : 'Regression'}.`;
    }

    // The main prompt template. It provides context, structured data, and clear instructions.
    let prompt = `
You are an expert data scientist providing an analysis for a client. The client has uploaded a CSV file named "${report.fileName}". 
You are to provide a summary and actionable insights based on the automated analysis report below. 
Your tone should be professional, insightful, and easy for a non-technical user to understand.
Format your response using clear markdown, including headers and bullet points.

**Automated Analysis Report Summary**

**1. Data Profile:**
- **Dimensions:** Started with ${report.initialRows} rows and ${report.initialCols} columns. After processing, there are ${report.cleanedRows} rows and ${report.cleanedCols} columns.
- **Column Details:**
${report.columnAnalyses.map(col => `  - **${col.name}** (Detected Type: ${col.type}): Found ${col.missingCount} missing values. ${col.type === 'Numeric' ? `Stats: Mean=${col.stats.mean?.toFixed(2)}, Median=${col.stats.median?.toFixed(2)}.` : `Stats: Most frequent value is '${col.stats.mode}', with ${col.stats.uniqueValues} unique values.`}`).join('\n')}

**2. Cleaning Actions Performed:**
${report.cleaningActions.length > 0 ? report.cleaningActions.map(act => `  - In column '${act.column}', missing values were filled using its ${act.details.startsWith('Used mean') ? 'mean value' : 'most frequent value (mode)'}.`).join('\n') : '  - No missing values were found, so no imputation was necessary.'}

**3. New Features Created (Feature Engineering):**
${report.featureEngineering.length > 0 ? report.featureEngineering.map(feat => `  - From the '${feat.sourceColumn}' column, the following new columns were created: ${feat.newColumns.join(', ')}.`).join('\n') : '  - No new features were automatically engineered.'}

**4. Machine Learning Context:**
- ${modelSuggestionInfo}

---

**Your Expert Analysis (Your Task):**

Based on the report above, please provide the following in markdown format:

1.  **Executive Summary:** Write a brief, high-level overview of the dataset. What could this dataset be about? Comment on its overall quality and cleanliness based on the report.
2.  **Key Insights & Observations:** Point out 2-3 of the most interesting or important findings from the column details. For example, highlight columns with a high number of missing values (even if they were filled), or interesting data distributions (e.g., skewed numeric data where the mean and median are very different).
3.  **Next Steps & Recommendations:**
    *   **Feature Engineering:** Suggest one or two more advanced feature engineering ideas that could provide more predictive power. For example, creating interaction terms between two columns, or binning a numeric column.
    *   **ML Model Choice:** Elaborate on why the suggested model type (Classification/Regression) is appropriate for the selected target variable ('${targetVariable}'). Briefly explain what a baseline model like Logistic/Linear Regression aims to achieve with this data and suggest what more complex models could be tried next.
`;
    return prompt;
}

/**
 * Calls the Gemini API to get an analysis of the report.
 * @param report The analysis report.
 * @param targetVariable The selected target variable.
 * @returns A promise that resolves to the AI-generated analysis text.
 */
export const getGeminiAnalysis = async (report: AnalysisReport, targetVariable: string): Promise<string> => {
    if (!targetVariable) {
        throw new Error("A target variable must be selected before requesting AI analysis.");
    }
    const prompt = buildPrompt(report, targetVariable);

    try {
        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash',
            contents: prompt,
            config: {
                // Controls the randomness of the output. Lower is more deterministic.
                temperature: 0.5,
                // The cumulative probability of tokens to consider.
                topP: 0.95,
            }
        });
        return response.text;
    } catch (error) {
        console.error("Gemini API Error:", error);
        // Provide a user-friendly error message.
        throw new Error("Could not retrieve analysis from Gemini. The API may be unavailable or the request may have been blocked due to safety settings.");
    }
};
